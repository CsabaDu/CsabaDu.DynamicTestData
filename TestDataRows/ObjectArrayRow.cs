// SPDX-License-Identifier: MIT
// Copyright (c) 2025. Csaba Dudas (CsabaDu)

namespace CsabaDu.DynamicTestData.TestDataRows;

/// <summary>
/// A concrete implementation of <see cref="TestDataRow{TRow, TTestData}"/> that represents
/// test data as an array of objects (object?[]). This is useful for test cases that expect
/// parameter arrays as input.
/// </summary>
/// <typeparam name="TTestData">
/// The specific type of test data this row contains, which must be non-null and implement <see cref="ITestData"/>.
/// </typeparam>
/// <param name="testData">The test data instance to associate with this row.</param>
public class ObjectArrayRow<TTestData>(TTestData testData)
    : TestDataRow<object?[], TTestData>(testData)
    where TTestData : notnull, ITestData
{
    /// <summary>
    /// Converts the test data into an array of objects using the provided data strategy.
    /// This implementation simply returns the parameters generated by the data strategy.
    /// </summary>
    /// <param name="dataStrategy">The data strategy to use for conversion.</param>
    /// <returns>
    /// An array of objects representing the test parameters. May contain null values.
    /// </returns>
    /// <remarks>
    /// This method effectively bypasses additional conversion since the target type (object?[])
    /// matches the output format of <see cref="TestDataRow{TRow, TTestData}.GetParams"/>.
    /// </remarks>
    public override object?[] Convert(IDataStrategy dataStrategy)
        => GetParams(dataStrategy);
}